body = [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 9, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 9, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 9, 9, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 1, 0, 9, 9, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 9, 9, 9, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 9, 9, 9, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 9, 9, 9, 9, 9, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 9, 9, 9, 9, 9, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 9, 9, 9, 9, 9, 9, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 9, 9, 9, 9, 9, 9, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 8, 8, 8, 8, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 8, 0, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 8, 0, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 0, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 0, 0, 4, 4, 4, 4, 4, 0, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 7, 7, 0, 4, 4, 4, 4, 0, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 7, 7, 7, 0, 4, 4, 4, 4, 4, 0, 0, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 7, 7, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 3, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 3, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 0, 0, 7, 7, 0, 0, 2, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 2, 0, 0, 7, 7, 7, 0, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, -1, 0, 0, 0, 2, 2, 2, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 2, 0, -1, 0, 6, 0, 2, 2, 2, 2, 0, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 2, 2, 2, 2, 0, 6, 0, -1, 0, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 2, 0, -1, 0, 6, 6, 0, 0, 0, 2, 2, 0, 5, 5, 0, 0, 2, 2, 0, 0, 5, 5, 0, 2, 2, 0, 0, 0, 6, 6, 0, -1, 0, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 0, 2, 0, -1, -1, 0, 6, 6, 6, 6, 6, 0, 2, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 2, 0, 6, 6, 6, 6, 6, 0, -1, -1, 0, 2, 0, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 0, 2, 0, -1, -1, 0, 0, 0, 6, 6, 6, 0, 2, 2, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 2, 2, 0, 6, 6, 6, 0, 0, 0, -1, -1, 0, 2, 0, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 4, 0, 2, 2, 0, -1, -1, -1, 0, 6, 0, 0, 0, 0, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 0, 0, 0, 0, 6, 0, -1, -1, -1, 0, 2, 2, 0, 4, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 0, 2, 2, 0, -1, -1, -1, -1, 0, 6, 6, 6, 0, 2, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 2, 0, 6, 6, 6, 0, -1, -1, -1, -1, 0, 2, 2, 0, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 4, 0, 2, 2, 0, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 0, 2, 2, 0, 5, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, 0, 2, 2, 0, 4, 4, 4, 4, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 4, 4, 4, 0, 2, 2, 0, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 0, 2, 2, 2, 2, 0, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, -1, 0, 2, 2, 0, 4, 4, 4, 4, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 4, 4, 4, 0, 0, 2, 2, 0, -1, -1, -1, -1, -1, 0, 0, 0, 6, 6, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 6, 6, 0, 0, 0, -1, -1, -1, -1, -1, 0, 2, 2, 0, 0, 4, 4, 4, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 4, 4, 0, 2, 0, 0, 2, 0, -1, -1, -1, -1, -1, 0, 6, 6, 0, 0, 0, 2, 0, 5, 5, 5, 0, 2, 2, 0, 5, 5, 5, 0, 2, 0, 0, 0, 6, 6, 0, -1, -1, -1, -1, -1, 0, 2, 0, 0, 2, 0, 4, 4, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 4, 0, 0, 2, 2, 2, 0, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 0, 2, 2, 0, 5, 5, 5, 0, 2, 2, 0, 5, 5, 5, 0, 2, 2, 0, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, 0, 2, 2, 2, 0, 0, 4, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 0, 6, 6, 6, 0, 0, -1, -1, -1, -1, -1, -1, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 2, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 6, 6, 0, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 0, 6, 6, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 0, 0, 0, 2, 2, 0, 0, 5, 0, 2, 2, 0, 5, 0, 0, 2, 2, 0, 0, 0, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 0, 2, 2, 0, 0, 5, 0, 2, 2, 2, 2, 0, 5, 0, 0, 2, 2, 0, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 0, 2, 2, 0, 5, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 0, 2, 2, 0, 5, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, 0, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 0, 6, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 0, 2, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 2, 0, 6, 6, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 6, 6, 0, 2, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 2, 0, 6, 6, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 6, 0, 2, 2, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0, 2, 2, 0, 6, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 0, 0, 2, 2, 2, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 2, 2, 2, 0, 0, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 2, 2, 2, 0, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 2, 2, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 0, 1, 1, 0, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 5, 5, 0, 0, 5, 5, 0, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 0, 1, 1, 0, 1, 0, -1, -1, -1, -1, -1, -1]]

menu = [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1] ,
[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0] ,
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0] ,
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ,
[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0] ,
[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1] ,
[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0] ,
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0] ,
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ,
[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0] ,
[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]]

settings_icon = [
[0, -1, 0, 0, 0, 0, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1] ,
[ 0, 0, 0, 0, -1, 0, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1] ,
[ 0, -1, 0, 0, 0, 0, -1, -1, -1]]

home_screen = [[-1, -1, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, -1, -1, -1, -1] ,
[-1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, 0, 1, 1, 0, 0, 1, 0, -1, -1, -1] ,
[0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, -1, -1, -1] ,
[-1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, -1, -1, 0, 1, 0, -1, -1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, -1, -1, -1] ,
[-1, 0, 0, 0, 1, 0, 1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, -1, -1, 0, 1, 0, -1, -1, 0, 1, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, -1] ,
[0, 1, 1, 1, 0, 0, 1, 0, -1, -1, -1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 1, 1, 0, 1, 0, -1, -1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0] ,
[-1, 0, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, 0, 0, 0, 0, -1]]

instructions = [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, -1, 2, -1, -1, 2, 2, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, -1]]

materiel_menu = [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3, 1, -1, -1, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 4, 4, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 4, 4, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 4, 4, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 5, 5, 5, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 5, 5, 5, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, 2, -1, 2, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 5, 5, 5, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, 2, -1, 2, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 6, 6, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 6, 6, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 6, 6, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, 2, 2, 2, -1, -1, 2, -1, 2, -1, -1, 2, 2, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 7, 7, 7, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 7, 7, 7, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 7, 7, 7, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, 2, 2, -1, -1, 2, -1, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, -1, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 8, 8, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 8, 8, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 8, 8, 1, -1, -1, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, 2, 2, -1, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, 2, -1, 2, -1, -1, 2, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ,
[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]

import pygame
from random import *
from time import *
pygame.mixer.init()

sound = False
try:
    select_sound = pygame.mixer.Sound('lol.mp3')
    start_sound = pygame.mixer.Sound('start1.mp3')
except Exception as e:
    print('Missing sound files', e)
    sound = False

innit = False
size = 5

""" MUSCLES """


""" MATERIEL """
halteres = False
barre = False
banc = False
elastique = False
corde_a_saute = False
barre_fixe = False

aucun = True # sans materiel
EnSalle = False
MaterielleAchetable = False

background_colour = (84,110,122)
(width, height) = (85*size, 85*size)
screen = pygame.display.set_mode((width, height))
running = True
settings = False
Materiel_menu_display = False
border = size

def get_exo():
    listexo = []
    f = open("Projet NSI.txt", "r")
    data = f.read()
    data_sep = str(data).split('\n')

    for x in range(len(str(data).split('\n'))):
        exo = str(data_sep[x]).split(';')
        for x in range(len(bool_dico)):
            muscle = list(bool_dico.keys())[x]
            if str(muscle) in str(data_sep[x]) and bool_dico[str(muscle)] == "True":
                if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                    if str(exo[1]) not in str(listexo):
                        exm=(exo[1],exo[3])
                        listexo.append(exm)
    return listexo

"""
def get_exo():
    listexo = []
    f = open("Projet NSI.txt", "r")
    data = f.read()
    data_sep = str(data).split('\n')

    for x in range(len(str(data).split('\n'))):
        exo = str(data_sep[x]).split(';')
        if 'Deltoïde' in str(data_sep[x]) and bool_dico["deltoïdes"] == "True":
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Biceps' in str(data_sep[x]) and bool_dico["display_biceps"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Brachial' in str(data_sep[x]) and bool_dico["Brachial"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Biceps_Brachial' in str(data_sep[x]) and bool_dico["Biceps_Brachial"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    listexo.append(exo[1])

        if 'muscle_des_avants_bras' in str(data_sep[x]) and bool_dico["muscle_des_avants_bras"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    listexo.append(exo[1])

        if 'Triceps' in str(data_sep[x]) and bool_dico["Triceps"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Trapèze' in str(data_sep[x]) and bool_dico["trapèze"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Abdos' in str(data_sep[x]) and bool_dico["display_abs"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Fessier' in str(data_sep[x]) and bool_dico["Fessier"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Grand pectoral' in str(data_sep[x]) and bool_dico["display_pecs"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Pectoraux' in str(data_sep[x]) and bool_dico["display_pecs"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                if str(exo[1]) not in str(listexo):
                    exm=(exo[1],exo[3])
                    listexo.append(exm)

        if 'Cuisse' in str(data_sep[x]) and bool_dico["Cuisse"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

        if 'Grand dorsal' in str(data_sep[x]) and bool_dico["Grand_dorsal"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

        if 'mollets' in str(data_sep[x]) and bool_dico["mollets"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

        if 'abducteurs' in str(data_sep[x]) and bool_dico["abducteurs"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

        if 'Quadriceps' in str(data_sep[x]) and bool_dico["Quadriceps"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

        if 'Ischio jambiers' in str(data_sep[x]) and bool_dico["Ischio_jambiers"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

        if 'Triceps Sural' in str(data_sep[x]) and bool_dico["Triceps_Sural"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)


        if 'Biceps fémoral' in str(data_sep[x]) and bool_dico["Biceps_fémoral"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)


        if 'Quadriceps droit de la cuisse' in str(data_sep[x]) and bool_dico["Quadriceps_droit_de_la_cuisse"] == "True":
            exo = str(data_sep[x]).split(';')
            if "Pas de matériel" in str(exo[5]) and aucun or "Matérielle achetable" in str(exo[5]) and MaterielleAchetable or "A faire en salle" in str(exo[5]) and EnSalle:
                        if str(exo[1]) not in str(listexo):
                            exm=(exo[1],exo[3])
                            listexo.append(exm)

    return listexo
"""
bool_dico = {
"display_abs": "False",
"display_pecs": "True",
"display_biceps" : "False",
"ext_obliques" : "False",
"trapèze" : "False",
"muscle_dentele" : "False",
"deltoïdes" : "False",
"Brachial" : "False",
"Biceps_Brachial" : "False",
"muscle_des_avants_bras" : "False",
"Triceps" : "False",
"Fessier" : "False",
"Lombaires" : "False",
"Pectoraux" : "False",
"Biceps" : "False",
"Cuisse" : "False",
"Grand_dorsal" : "False",
"mollets" : "False",
"abducteurs" : "False",
"Quadriceps" : "False",
"Ischio_jambiers" : "False",
"Triceps_Sural" : "False",
"Biceps_fémoral" : "False",
"Quadriceps_droit_de_la_cuisse" : "False"
}

body_colors = {-1:(84,110,122),
          0:(38,50,56),
          1:(255,255,255),
          2:(120,120,120),
          3:((229,57,53),"display_pecs"),
          4:((229,57,53),"display_biceps"),
          5:((229,57,53),"display_abs"),
          6:((229,57,53),"ext_obliques"),
          7:((229,57,53),"muscle_dentele"),
          8:((229,57,53),"deltoïdes"),
          9:((229,57,53),"trapèze")
}

def draw(matrix, size, colors, bool_dico):
    global screen
    for x in range(len(matrix[0])):
        for y in range(len(matrix)):
            if matrix[y][x] in colors:
                if len(colors[matrix[y][x]]) == 2:
                    if bool_dico[str(colors[matrix[y][x]][1])] == "False":
                        pygame.draw.rect(screen, (255,255,255), (size*x, size*y, size, size))
                    else:
                        pygame.draw.rect(screen, colors[matrix[y][x]][0], (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, colors[matrix[y][x]], (size*x, size*y, size, size))


    draw_settings_icon(settings_icon, size)
    pygame.display.update()
    exos = get_exo()
    if exos != []:
        print(exos)

def draw_materiel_menu(materiel_menu, size):
    global screen
    for x in range(85):
        for y in range(85):
            #if materiel_menu[y][x] == -1:
                #pygame.draw.rect(screen, (84,110,122), (size*x, size*y, size, size))
            if materiel_menu[y][x] == 0 or  materiel_menu[y][x] == 1:
                pygame.draw.rect(screen, (38,50,56), (size*x, size*y, size, size))
            if materiel_menu[y][x] == 2:
                pygame.draw.rect(screen, (144,164,174), (size*x, size*y, size, size))

            if materiel_menu[y][x] == 5:
                if banc == True:
                    pygame.draw.rect(screen, (139,195,74), (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, (229,57,53), (size*x, size*y, size, size))

            if materiel_menu[y][x] == 3:
                if halteres == True:
                    pygame.draw.rect(screen, (139,195,74), (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, (229,57,53), (size*x, size*y, size, size))

            if materiel_menu[y][x] == 4:
                if barre == True:
                    pygame.draw.rect(screen, (139,195,74), (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, (229,57,53), (size*x, size*y, size, size))

            if materiel_menu[y][x] == 6:
                if elastique == True:
                    pygame.draw.rect(screen, (139,195,74), (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, (229,57,53), (size*x, size*y, size, size))

            if materiel_menu[y][x] == 7:
                if corde_a_saute == True:
                    pygame.draw.rect(screen, (139,195,74), (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, (229,57,53), (size*x, size*y, size, size))

            if materiel_menu[y][x] == 8:
                if barre_fixe == True:
                    pygame.draw.rect(screen, (139,195,74), (size*x, size*y, size, size))
                else:
                    pygame.draw.rect(screen, (229,57,53), (size*x, size*y, size, size))

    draw_settings_icon(settings_icon, size)
    pygame.display.update()
    exos = get_exo()
    if exos != []:
        print(exos)

def draw_menu(menu, size):
    global screen
    for x in range(48):
        for y in range(len(menu)):
            if menu[y][x] == 0:
                pygame.draw.rect(screen, (38,50,56), ((x+20)*size, (y+30)*size, size, size))
            if menu[y][x] == 1:
                pygame.draw.rect(screen, (255,255,255), ((x+20)*size, (y+30)*size, size, size))

    pygame.display.update()

def draw_settings_icon(settings_icon, size):
    global screen
    for x in range(len(settings_icon[0])):
        for y in range(len(settings_icon)):
            if settings_icon[y][x] == 0:
                pygame.draw.rect(screen, (38,50,56), ((x+76)*size, (y+3)*size, size, size))

    pygame.display.update()

def draw_home_screen(home_screen, size):
    global screen
    for x in range(len(home_screen[0])):
        for y in range(len(home_screen)):
            if home_screen[y][x] == 0:
                pygame.draw.rect(screen, (38,50,56), ((x+20)*size, (y+34)*size, size, size))
            if home_screen[y][x] == 1:
                pygame.draw.rect(screen, (255,255,255), ((x+20)*size, (y+34)*size, size, size))

    pygame.display.update()

def draw_instructions(instructions, size):
    global screen
    for x in range(len(instructions[0])):
        for y in range(len(instructions)):
            if instructions[y][x] == 2:
                pygame.draw.rect(screen, (129,150,161), ((x+20)*size, (y+41)*size, size, size))

    pygame.display.update()

def main():
    global screen
    screen.fill(background_colour)
    if innit == True:
        draw_home_screen(home_screen, size)
        if sound == True:
            start_sound.play()
        sleep(0.5)
        draw_instructions(instructions, size)
    if innit == False:
        if settings == True:
            #screen = pygame.display.set_mode((width+300, height))
            #screen = pygame.display.set_mode((width, height))
            pygame.display.set_caption('options')
            draw_menu(menu, size)
        else:
            #screen = pygame.display.set_mode((width, height))
            pygame.display.set_caption('Muscles selection')
            draw(body, size, body_colors, bool_dico)

        draw_settings_icon(settings_icon, size)
    pygame.display.flip()

if EnSalle == True:
     MaterielleAchetable = True

main()

while running:
    for event in pygame.event.get():
        try:
            if event.type == pygame.MOUSEBUTTONDOWN:
                Xpos, Ypos = pygame.mouse.get_pos()
                """
                if innit == True:
                    innit = False"""
                draw(body, size, body_colors, bool_dico)

                if round(Xpos/5) >= 76 and round(Xpos/5) <= 82 and round(Ypos/5) >= 2 and round(Ypos/5) <= 7:
                    if settings == False:
                        settings = True
                    else:
                        settings = False
                    Materiel_menu_display = False
                    main()
                if settings == True and round(Xpos/5) >= 20 and round(Xpos/5) <= 68 and round(Ypos/5) >= 30 and round(Ypos/5) <= 41:
                    settings = False
                    Materiel_menu_display = True
                    screen.fill(background_colour)
                    draw_materiel_menu(materiel_menu, size)

                if settings == False and innit == False and Materiel_menu_display == False:
                    if body[round(Ypos/5)][round(Xpos/5)] == 5:
                        if display_abs == True:
                            display_abs = False
                        else:
                            if sound == True:
                                select_sound.play()
                            display_abs = True
                        draw(body, size, body_colors, bool_dico)
                    elif body[round(Ypos/5)][round(Xpos/5)] == 3:
                        if display_pecs == True:
                            display_pecs = False
                        else:
                            display_pecs = True
                            if sound == True:
                                select_sound.play()
                        draw(body, size, body_colors, bool_dico)
                    elif body[round(Ypos/5)][round(Xpos/5)] == 4:
                        if display_biceps == True:
                            display_biceps = False
                        else:
                            display_biceps = True
                            if sound == True:
                                select_sound.play()
                        draw(body, size, body_colors, bool_dico)

                    elif body[round(Ypos/5)][round(Xpos/5)] == 6:
                        if ext_obliques == True:
                            ext_obliques = False
                        else:
                            ext_obliques = True
                            if sound == True:
                                select_sound.play()
                        draw(body, size, body_colors, bool_dico)

                    elif body[round(Ypos/5)][round(Xpos/5)] == 7:
                        if muscle_dentele == True:
                            muscle_dentele = False
                        else:
                            muscle_dentele = True
                            if sound == True:
                                select_sound.play()
                        draw(body, size, body_colors, bool_dico)

                    elif body[round(Ypos/5)][round(Xpos/5)] == 8:
                        if deltoïdes == True:
                            deltoïdes = False
                        else:
                            deltoïdes = True
                            if sound == True:
                                select_sound.play()
                        draw(body, size, body_colors, bool_dico)

                    elif body[round(Ypos/5)][round(Xpos/5)] == 9:
                        if trapèze == True:
                            trapèze = False
                        else:
                            trapèze = True
                            if sound == True:
                                select_sound.play()
                        draw(body, size, body_colors, bool_dico)

                elif settings == False and innit == False and Materiel_menu_display == True:
                    if materiel_menu[round(Ypos/5)][round(Xpos/5)] == 3:
                        if halteres == True:
                            halteres = False
                        else:
                            halteres = True
                    if materiel_menu[round(Ypos/5)][round(Xpos/5)] == 4:
                        if barre == True:
                            barre = False
                        else:
                            barre = True
                    if materiel_menu[round(Ypos/5)][round(Xpos/5)] == 5:
                        if banc == True:
                            banc = False
                        else:
                            banc = True
                    if materiel_menu[round(Ypos/5)][round(Xpos/5)] == 6:
                        if elastique == True:
                            elastique = False
                        else:
                            elastique = True
                    if materiel_menu[round(Ypos/5)][round(Xpos/5)] == 7:
                        if corde_a_saute == True:
                            corde_a_saute = False
                        else:
                            corde_a_saute = True
                    if materiel_menu[round(Ypos/5)][round(Xpos/5)] == 8:
                        if barre_fixe == True:
                            barre_fixe = False
                        else:
                            barre_fixe = True
                    draw_materiel_menu(materiel_menu, size)

            if event.type == pygame.QUIT:
                running = False
        except:
            pass